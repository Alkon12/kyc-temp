
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url  = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  firstName String?
  lastName String?
  email String? @unique
  emailVerified DateTime?
  phoneNumber String?
  picture String?
  hashedPassword String? // we should remove this after removing credentials auth
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  groups UserGroup[]
  accounts Account[]
}

model Account {
  id String @id @default(uuid())
  userId String  
  type String
  provider String
  providerAccountId String @map("provider_account_id")
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Group {
  id String @id @db.VarChar(40)
  title String

  users UserGroup[]
}

model UserGroup {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String // relation scalar field (used in the `@relation` attribute above)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String @db.VarChar(40)  // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, groupId])
}
