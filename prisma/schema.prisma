
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url  = env("DATABASE_URL")
}

model Location {
  id String @id @default(uuid())
  name String?
  order Int @default(1)

  leads Lead[]
  users User[]
  leasings Leasing[]
}


model Lead {
  id String @id @default(uuid())
  friendlyId String? @unique
  firstName String?
  lastName String?
  email String?
  phoneNumber String?
  contactype String?
  hasUberAccount Boolean @default(false)
  uberDriverId String?
  uberRating Decimal? @db.Decimal(2,1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  locationId String?
  productOfInterestId String?
  isBot Boolean @default(false)
  browserName String?
  browserVersion String?
  deviceModel String?
  deviceType String?
  deviceVendor String?
  engineName String?
  engineVersion String?
  countryCode String?
  status String
  supportUserId String?
  visitAppointmentAt DateTime?

  location Location? @relation(fields: [locationId], references: [id])
  productOfInterest Product? @relation(fields: [productOfInterestId], references: [id])
  supportUser User? @relation(name: "leadSupportUser", fields: [supportUserId], references: [id])

  user User[]
  tasks Task[]  
}

model User {
  id String @id @default(uuid())
  firstName String?
  lastName String?
  secondLastName String?
  email String? @unique
  emailVerified DateTime?
  phoneNumber String?
  picture String?
  hashedPassword String? // we should remove this after removing credentials auth
  leadId String?
  locationId String?
  rfc String?
  curp String?
  gender String?
  driverLicenseNumber String?
  driverLicenseValidity DateTime?
  driverLicensePermanent Boolean?
  uberDriverId String?
  uberRating Decimal? @db.Decimal(2,1)
  uberPromoCode String?
  uberActivationStatus String?
  uberPartnerRole String?
  uberEarningsRetentionActive Boolean @default(false)
  uberCityName String?
  uberCityCode String?
  uberTier String?
  uberTenureMonths Int?
  uberLastMonthTripCount Int?
  uberLastMonthEarnings Int?

  dob DateTime?
  
  // uberAutoDisbursementsElgibileProducts 
  // uberAutoDisbursementsElgibileProducts 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String? // needed for nextAuth fixed props
  image String? // needed for nextAuth fixed props
  
  lead Lead? @relation(fields: [leadId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
  prospect Prospect? @relation(name: "prospectUser")

  groups UserGroup[]
  accounts Account[]
  quotes Quote[]
  offers Offer[]
  applications Application[]
  leasings Leasing[]
  assignedTasks Task[] @relation(name: "userAssignedTasks")
  audit Audit[]
  acceptedTasks Task[] @relation(name: "userAcceptedByTasks")
  delcinedTasks Task[] @relation(name: "userDeclinedByTasks")
  dismissedTasks Task[] @relation(name: "userDismissedByTasks")
  dismissedChecklists ApplicationChecklist[] @relation(name: "userDismissedByChecklists")
  slotsAsHost Slot[] @relation(name: "hostUserSlot")
  slotsAsguest Slot[] @relation(name: "guestUserSlot")
  notifications Notification[]
  trips Trip[]
  prospectActivity ProspectActivity[] @relation(name: "prospectActivityCreatedBy")
  assignedProspects Prospect[] @relation(name: "prospectSupportUser")
  assignedLastActivities Prospect[] @relation(name: "prospectLastActivityUser")
  DeviceTokens DeviceToken[]
  referredInvitations Invitation[]
  assignedLeads Lead[] @relation(name: "leadSupportUser")
}

model Account {
  id String @id @default(uuid())
  userId String  
  type String
  provider String
  providerAccountId String @map("provider_account_id")
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Group {
  id String @id @db.VarChar(40)
  title String

  users UserGroup[]
  assignedTasks TaskGroup[]
  assignedTaskTypes TaskTypeGroup[]
}

model UserGroup {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String // relation scalar field (used in the `@relation` attribute above)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String @db.VarChar(40)  // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, groupId])
}

model Prospect {
  id String @id @default(uuid())
  friendlyId String? @unique
  userId String @unique
  supportUserId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActivityAt DateTime @default(now())
  prospectStatusId String
  activeApplicationId String?
  lastActivityUserId String?
  prospectProfilingId String?
  
  activeApplication Application? @relation(name: "prospectActiveApplication", fields: [activeApplicationId], references: [id], onDelete: Cascade)
  prospectStatus ProspectStatus? @relation(fields: [prospectStatusId], references: [id], onDelete: Cascade)
  user User @relation(name: "prospectUser", fields: [userId], references: [id], onDelete: Cascade)
  supportUser User? @relation(name: "prospectSupportUser", fields: [supportUserId], references: [id])
  lastActivityUser User? @relation(name: "prospectLastActivityUser", fields: [lastActivityUserId], references: [id])
  // invitation Invitation? @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  
  activity ProspectActivity[]
  quotes Quote[]
  applications Application[] @relation(name: "prospectApplications")
  invitations Invitation[]
  slots Slot[]
}

model ProspectStatus {
  id String @id
  name String
  manualAssignable Boolean @default(false)
  order Int?
  
  prospect Prospect[]
  activity ProspectActivity[]
}

model ProspectActivity {
  id String @id @default(uuid())
  prospectId String
  prospectActivityTypeId String
  notes String?
  createdByUserId String?
  createdAt DateTime @default(now())
  prospectStatusId String?
  
  prospect Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  prospectActivityType ProspectActivityType @relation(fields: [prospectActivityTypeId], references: [id], onDelete: Cascade)
  createdByUser User? @relation(name: "prospectActivityCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  prospectStatus ProspectStatus? @relation(fields: [prospectStatusId], references: [id], onDelete: Cascade)
}

model ProspectActivityType {
  id String @id
  name String
  
  prospectActivity ProspectActivity[]
}

model Quote {
  id String @id @default(uuid())
  friendlyId String? @unique
  prospectId String?
  userId String  
  hasAttachedApplication Boolean @default(false)  
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  scoringComplete Boolean @default(false)
  scoringError Boolean @default(false)
  scoringErrorMessage String?
  scoringRaw String? // TODO scoringRaw Json? ----> ValueObject problem
  scoringEngine String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  prospect Prospect? @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  offers Offer[]
  tasks Task[]
  audit Audit[]
  applications Application[]
  invitations Invitation[]
}

model Offer {
  id String @id @default(uuid())
  userId String
  quoteId String
  productId String
  weeklyPrice Int?
  leasingPeriod Int?
  hasAttachedApplication Boolean @default(false)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  scoringMark String?
  scoringResolution String?  
  scoringVerdict String?
  scoringBrief String?
  scoringAnalysis String?
  scoringDetails String?
  requestedChecklist String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  applications Application[]
  tasks Task[]
  audit Audit[]
}

model Product {
  id String @id @default(uuid())
  title String
  brand String
  model String
  year Int?
  series String
  picture String?
  defaultWeeklyPrice Int?
  defaultLeasingPeriod Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive Boolean @default(false)
  
  estimatedAcceleration Float?
  engineType String?
  estimatedHorsepower Int?
  estimatedTopSpeedKmH Int?
  numberOfSpeeds Int?
  turbo String?
  cylinders String?
  fuelType String?
  liters Float?
  estimatedTorqueLbFt Int?
  startStop String?
  frontElectricWindows String?
  transmission String?
  idversion Int?
  highwayFuelEconomy Float?
  cityFuelEconomy Float?
  safetyFeatures String?
  confortFeatures String?
  
  offers Offer[]
  vehicles Vehicle[]
  applications Application[]
  leads Lead[]
  tasks Task[]
  audit Audit[]
  invitations Invitation[]
}

model Vehicle {
  id String @id @default(uuid())
  productId String?
  vin String?
  trackerDeviceId String?
  trackerDeviceSim String?
  trackerDeviceImei String?
  contractId String?
  color String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  leasings Leasing[]
  applications Application[]
  audit Audit[]
  tasks Task[]
}

model Application {
  id String @id @default(uuid())
  prospectId String
  friendlyId String? @unique
  userId String
  productId String
  offerId String
  quoteId String
  vehicleId String?
  addressId String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  kycDriverEngagedAt DateTime?
  kycFinishedAt DateTime?
  finishedAt DateTime?
  expiredAt DateTime?
  inactivityStatementReason String?
  idpersona String?
  quoteSmartItId String?
  contractId String?
  contractDate DateTime?
  identificationCard String?
  identificationCardReverse String?
  selfiePicture String?
  driversLicense String?
  driversLicenseReverse String?
  incomeStatement String?
  inactivityStatement String?
  taxIdentification String?
  addressProof String?
  
  prospect Prospect? @relation(name: "prospectApplications", fields: [prospectId], references: [id], onDelete: Cascade)
  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  address Address? @relation(fields: [addressId], references:[id])

  prospects Prospect[] @relation(name: "prospectActiveApplication")
  checklist ApplicationChecklist[]  
  tasks Task[]
  audit Audit[]
  invitations Invitation[]
}

model Leasing {
  id String @id @default(uuid())
  friendlyId String? @unique
  userId String
  vehicleId String
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())
  locationId String?
  expiredAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [locationId], references: [id])

  tasks Task[]
  audit Audit[]
}

model Checklist {
  id String @id @db.VarChar(150)
  name String
  order Int?
  parentId String? @db.VarChar(150)
  isDefault Boolean @default(false)
  dismissible Boolean @default(false)
  
  parent Checklist? @relation(name: "checklistParenting", fields: [parentId], references: [id])
  childs Checklist[] @relation(name: "checklistParenting")
  applicationChecklists ApplicationChecklist[]  
}

model ApplicationChecklist {
  id String @id @default(uuid())
  order Int?
  applicationId String
  checklistId String @db.VarChar(150)
  completed Boolean @default(false)
  completedAt DateTime?
  started Boolean @default(false)
  startedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  parentId String? @db.VarChar(150)
  dismissible Boolean @default(false)
  dismissedBy String?
  dismissedAt DateTime?
  dismissedMessage String? 

  dismissedByUser User? @relation(name: "userDismissedByChecklists", fields: [dismissedBy], references: [id])
  
  parent ApplicationChecklist? @relation(name: "applicationChecklistParenting", fields: [parentId], references: [id])
  childs ApplicationChecklist[] @relation(name: "applicationChecklistParenting")
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  checklist Checklist @relation(fields: [checklistId], references: [id])
  tasks Task[] @relation("ApplicationChecklist")

  // @@id([applicationId, checklistId])
}

model ParamHeader {
  id String @id 
  description String
  createdAt DateTime @default(now())

  paramDetails ParamDetail[]
}

model ParamDetail {
  id String @id
  value String 
  idParam String
  createdAt DateTime @default(now())

  paramHeader ParamHeader @relation(fields:[idParam], references:[id], onDelete:Cascade)
}

model Slot {
  id String @id @default(uuid())
  slotType String 
  startsAt DateTime?
  endsAt DateTime?
  hostUserId String?
  guestUserId String?
  prospectId String?
  free Boolean @default(true)
  
  hostUser User? @relation(name: "hostUserSlot", fields: [hostUserId], references: [id], onDelete: Cascade)
  guestUser User? @relation(name: "guestUserSlot", fields: [guestUserId], references: [id], onDelete: Cascade)
  tasks Task[]
  prospect Prospect? @relation(fields: [prospectId], references: [id], onDelete: Cascade)
}

model Task {
  id String @id @default(uuid())
  message String?
  taskTypeId String
  done Boolean @default(false)
  dismissible Boolean @default(false)
  optional Boolean @default(false)
  expiresAt DateTime?
  flaggedAt DateTime?
  relevance Int
  assignedUserId String?
  originTaskId String?
  leadId String?
  offerId String?
  quoteId String?
  applicationId String?
  leasingId String?
  vehicleId String?
  productId String?
  slotId String?
  acceptedBy String?
  acceptedAt DateTime?
  declinedBy String?
  declinedAt DateTime?
  dismissedBy String?
  dismissedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  applicationChecklistId String?
  customData String? // stringified json
  
  taskType TaskType @relation(fields: [taskTypeId], references: [id])
  assignedUser User? @relation(name: "userAssignedTasks", fields: [assignedUserId], references: [id])
  acceptedByUser User? @relation(name: "userAcceptedByTasks", fields: [acceptedBy], references: [id])
  declinedByUser User? @relation(name: "userDeclinedByTasks", fields: [declinedBy], references: [id])
  dismissedByUser User? @relation(name: "userDismissedByTasks", fields: [dismissedBy], references: [id])
  lead Lead? @relation(fields: [leadId], references: [id])
  offer Offer? @relation(fields: [offerId], references: [id], onDelete: Cascade)
  quote Quote? @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  leasing Leasing? @relation(fields: [leasingId], references: [id])
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  slot Slot? @relation(fields: [slotId], references: [id])
  applicationChecklist ApplicationChecklist? @relation("ApplicationChecklist", fields: [applicationChecklistId], references: [id])
  assignedGroups TaskGroup[]
  audit Audit[]
  contentQueue ContentQueue[]
  originTask Task? @relation(name: "taskSelfRelation", fields: [originTaskId], references: [id])
  originatedTasks Task[] @relation(name: "taskSelfRelation")
}

model TaskGroup {
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  group Group @relation(fields: [groupId], references: [id])
  groupId String @db.VarChar(40)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([taskId, groupId])
}

model TaskType {
  id String @id
  name String
  
  tasks Task[]
  assignedGroups TaskTypeGroup[]
}


model TaskTypeGroup {
  taskType TaskType @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  taskTypeId String
  group Group @relation(fields: [groupId], references: [id])
  groupId String @db.VarChar(40)

  @@id([taskTypeId, groupId])
}


model Notification {
  id String @id @default(uuid())
  aliasOf String? // Relate notification instances in case of multimedium
  title String
  body String?
  link String?
  picture String?
  notificationTypeId String
  channel String // Push, Mail, Whatsapp, App, Web
  relevance Int
  assignedUserId String?
  delivered Boolean @default(false)
  deliveredAt DateTime?
  read Boolean @default(false)
  readAt DateTime?
  dismissed Boolean @default(false)
  dismissedAt DateTime?
  engaged Boolean @default(false)
  engagedAt DateTime?
  createdAt DateTime @default(now())
  
  assignedUser User? @relation(fields: [assignedUserId], references: [id])
}


model Audit {
  id String @id @default(uuid())
  message String?
  
  userId String?
  taskId String?
  offerId String?
  quoteId String?
  applicationId String?
  leasingId String?
  vehicleId String?
  productId String?
  
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  
  user User? @relation(fields: [userId], references: [id])
  task Task? @relation(fields: [taskId], references: [id])
  offer Offer? @relation(fields: [offerId], references: [id])
  quote Quote? @relation(fields: [quoteId], references: [id])
  application Application? @relation(fields: [applicationId], references: [id])
  leasing Leasing? @relation(fields: [leasingId], references: [id])
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
}

model Address {
  id String @id @default(uuid())
  street String 
  extNumber String
  intNumber String? 
  zipCode String 
  district String 
  city String
  state String
  country String
  latitude String?
  longitude String?
  real_time_latitude String?
  real_time_longitude String?
  isRental Boolean?
  rentalAmount Float?
  timeLivingIn String?
  hasGarage Boolean?
  isBillingAddress Boolean?
  
  applications Application[] 
  branches Branch[]
}

model ContentQueue {
  id String @id @default(uuid())
  contentProvider String
  referenceKey String
  taskId String?
  metadata String?
  createdAt DateTime? @default(now())
  
  task Task? @relation(fields: [taskId], references: [id])
}


model Trip {
  id String @id @default(uuid())
  userId String
  vehicleId String?
  fareCurrency String?
  fareAmount Decimal? @db.Decimal(8,2)
  distance Int?
  duration Int?
  acceptedAt DateTime?  
  arrivedAt DateTime?
  pickupAt DateTime?
  dropoffAt DateTime?

  pickupLat Decimal? @db.Decimal(11,8)
  pickupLng Decimal? @db.Decimal(11,8)
  
  loggedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DeviceToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  device    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Bitacora {
  id        String   @id @default(uuid())
  alarmId   String
  userId    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  alarm     Alarm    @relation(fields: [alarmId], references: [id])
}

model Alarm {
  id         String    @id @default(uuid())
  deviceId   String
  alertLevel String
  category   String
  subcategory String
  status     String
  lastUpdate DateTime @default(now())
  date       DateTime @default(now())
  bitacoras  Bitacora[]
}

model Branch {
  id String @id
  name String
  isPhysicalPlace Boolean @default(false)
  addressId String?
  
  address Address? @relation(fields: [addressId], references: [id])
  invitations Invitation[]
}

model Campaign {
  id String @id
  name String
  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  invitations Invitation[]
}

model Promotion {
  id String @id
  name String
  isActive Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitations Invitation[]
}

model Invitation {
  id String @id @default(uuid())
  firstName String?
  lastName String?
  email String?
  phoneNumber String?
  hasUberAccount Boolean @default(false)
  productId String?

  isOnsite Boolean @default(false)
  referrerId String?
  campaignId String?
  branchId String?
  promotionId String?
  comments String?
  prospectId String?
  quoteId String?
  applicationId String?
  
  status String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)  
  branch Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)  
  campaign Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)  
  promotion Promotion? @relation(fields: [promotionId], references: [id], onDelete: Cascade)  
  referrer User? @relation(fields: [referrerId], references: [id], onDelete: Cascade)  
  quote Quote? @relation(fields: [quoteId], references: [id], onDelete: Cascade)  
  prospect Prospect? @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)  
  // prospects Prospect[]
}