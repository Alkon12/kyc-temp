generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url  = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  firstName String?
  lastName String?
  email String? @unique
  emailVerified DateTime?
  phoneNumber String?
  picture String?
  hashedPassword String? // we should remove this after removing credentials auth
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  groups UserGroup[]
  accounts Account[]
  // Relaciones para el back office:
  userRoles        UserRole[]
  kycVerificationsAssigned KycVerification[] @relation("AssignedUser")
  documentsReviewed       Document[]
  activityLogs     ActivityLog[]
}

model Account {
  id String @id @default(uuid())
  userId String  
  type String
  provider String
  providerAccountId String @map("provider_account_id")
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Group {
  id String @id @db.VarChar(40)
  title String

  users UserGroup[]
}

model UserGroup {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String // relation scalar field (used in the `@relation` attribute above)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String @db.VarChar(40)  // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, groupId])
}

model Company {
  id          String   @id @default(uuid())
  companyName String
  apiKey      String   @unique
  status      String   @default("active")
  callbackUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userRoles            UserRole[]
  kycVerifications     KycVerification[]
  verificationSettings VerificationSetting[]
}

model Role {
  id          String   @id @default(uuid())
  roleName    String   @unique
  description String?
  createdAt   DateTime @default(now())
  
  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

model Permission {
  id             String   @id @default(uuid())
  permissionName String   @unique
  description    String?
  createdAt      DateTime @default(now())
  
  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId    String
  roleId    String
  companyId String?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@unique([userId, roleId, companyId])
}

model VerificationLink {
  id              String   @id @default(uuid())
  verificationId  String
  token           String   @unique
  status          String   @default("active") // active, expired, invalidated
  expiresAt       DateTime?
  lastAccessedAt  DateTime?
  accessCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  kycVerification KycVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)

  @@index([verificationId], name: "idx_verification_links_verification")
  @@index([token], name: "idx_verification_links_token")
}

model KycVerification {
  id                  String   @id @default(uuid())
  externalReferenceId String?
  companyId           String
  status              String   @default("pending")
  riskLevel           String?
  priority            Int      @default(0)
  verificationType    String
  assignedTo          String?  // Referencia al User que lo asigna/revisa
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  completedAt         DateTime?

  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignedUser  User?       @relation("AssignedUser", fields: [assignedTo], references: [id])
  kycPersons    KycPerson[]
  facetecResults FacetecResult[]
  documents     Document[]
  activityLogs  ActivityLog[]
  externalVerifications ExternalVerification[]
  verificationWorkflows VerificationWorkflow[]
  verificationLinks    VerificationLink[]

  @@index([companyId], name: "idx_kyc_verifications_company")
  @@index([status], name: "idx_kyc_verifications_status")
}

model KycPerson {
  id             String   @id @default(uuid())
  verificationId String
  firstName      String?
  lastName       String?
  dateOfBirth    DateTime?
  nationality    String?
  documentNumber String?
  documentType   String?
  email          String?
  phone          String?
  address        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  kycVerification KycVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
}

model FacetecResult {
  id                    String   @id @default(uuid())
  verificationId        String
  sessionId             String
  livenessStatus        String   @default("pending")  // "passed", "failed", "pending"
  enrollmentStatus      String   @default("pending")  // "success", "failed", "pending"
  matchLevel            Decimal? @db.Decimal(5,2)
  fullResponse          Json?    // Optional: store complete response for debugging
  manualReviewRequired  Boolean  @default(false)
  createdAt             DateTime @default(now())

  kycVerification       KycVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)

  @@index([verificationId], name: "idx_facetec_results_verification")
}

model Document {
  id                 String   @id @default(uuid())
  verificationId     String
  documentType       String
  filePath           String
  fileName           String
  fileSize           Int?
  mimeType           String?
  verificationStatus String   @default("pending")
  ocrData            Json?
  reviewerId         String?
  reviewNotes        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  kycVerification    KycVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
  reviewer           User?           @relation(fields: [reviewerId], references: [id])
  
  @@index([verificationId], name: "idx_documents_verification")
}

model ActivityLog {
  id             String   @id @default(uuid())
  userId         String
  verificationId String?
  action         String
  description    String?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  kycVerification KycVerification? @relation(fields: [verificationId], references: [id])

  @@index([verificationId], name: "idx_activity_logs_verification")
  @@index([userId], name: "idx_activity_logs_user")
}

model VerificationSetting {
  id                    String   @id @default(uuid())
  companyId             String
  facetecMatchThreshold Decimal  @default(80.00) @db.Decimal(5,2)
  requiredDocuments     Json?
  autoApprovalRules     Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model ExternalVerification {
  id               String   @id @default(uuid())
  verificationId   String
  provider         String
  verificationType String
  requestData      Json?
  responseData     Json?
  status           String?
  createdAt        DateTime @default(now())

  kycVerification  KycVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
}

model VerificationWorkflow {
  id               String   @id @default(uuid())
  verificationId   String
  currentStep      String
  stepStatus       String
  nextStep         String?
  stepRequirements Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  kycVerification  KycVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
}