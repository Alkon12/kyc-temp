extend type Query {
  activeLeasings: [Leasing]
  leasingById(leasingId: ID!): Leasing!
  tripsByDate(leasingId: ID!, from: String!, to: String!): [Trip]
  currentVehicleStatus(leasingId: ID!): VehicleStatusResponse!
  trackerTrips(leasingId: ID!, date: String!): [TrackerTrip]!
  leasingAlarms(leasingId: ID!): LeasingAlarmsResponse!
  leasingDailySummary(leasingId: ID!, date: String!): LeasingDailySummary!
  leasingWeeklySummary(leasingId: ID!, weekNumber: Int!): LeasingWeeklySummary!
  leasingFinancialWeeklySummary(leasingId: ID!, weekNumber: Int): [LeasingFinancialWeekSummary!]!
  leasingFinancialDebtVoucher(leasingId: ID!, weekNumber: Int!): LeasingFinancialDebtVoucher
  leasingSummary(leasingId: ID!, weekNumber: Int!): LeasingSummary!
  leasingPendingPayments(contractId: Int!): [LeasingPendingPayment]!
  leasingPendingBankReferences(quoteSmartItId: Int!): [LeasingPendingBankReference]!
  leasingAccountSummary(quoteSmartItId: Int!): LeasingAccountSummary
  banksWithReferDeatils:[BankReferDeatil]
  weeklyVehicleUsage(leasingId: ID!): [VehicleUsage]
  """
  This query gets the average usage over the last 3 weeks
  """
  vehicleUsageSummary(leasingId: ID!): VehicleUsageSummary
}

extend type Mutation {
  createBankReference(quoteSmartItId: Int!, pendingPaymentsIds: [Int]!): LeasingPendingBankReference
}

type Leasing {
  id: ID!
  startDate: DateTime
  endDate: DateTime
  userId: ID
  locationId: ID
  vehicleId: ID
  productId: ID
  createdAt: DateTime
  updatedAt: DateTime

  user: User
  location: Location
  vehicle: Vehicle
  product: Product
}

type Trip {
  id: ID!
  userId: ID
  vehicleId: ID
  fareCurrency: String
  fareAmount: Float
  distance: Int
  duration: Int
  acceptedAt: DateTime
  arrivedAt: DateTime
  pickupAt: DateTime
  dropoffAt: DateTime
  pickupLat: Int
  pickupLng: Int
  loggedAt: DateTime!

  user: User
}


type VehicleStatusResponse {
  tracker: TrackerDeviceStatus
}

type TrackerDeviceStatus {
  currentOdometer: Int
  status: String
  motion: Boolean
  ignition: Boolean
  speed: Int
  lastLat: Float
  lastLon: Float
  lastUpdate: DateTime
  lastConnection: DateTime

  weeksSumDistance: Float # TODO move out of here
  drivingScore: Float # TODO move out of here
  totalEvents: Int # TODO move out of here
  totalTrips: Int # TODO move out of here
  uberWeeksUsage: Float
  uberWeeksSumDistance: Float
}



type TrackerTrip {
  tripId: String
  averageSpeed: Float
  date: DateTime
  deviceId: Int
  deviceName: String
  distance: Float
  duration: Int
  startAddress: String
  startLat: Float
  startLon: Float
  startOdometer: Int
  startTime: DateTime
  endAddress: String
  endLat: Float
  endLon: Float
  endOdometer: Int
  endTime: DateTime
  maxSpeed: Float
  score: TrackerTripScore
}

type TrackerTripScore {
  contextScore: String
  distance: Float
  drivingScore: Int
  drivingScoreContextualized: Int
  totalEvents: Int
  validPositions: String
  events: String
}


type LeasingAlarmsResponse {
  alarms: [Alarm]
}

type Alarm {
  id: ID
  alertLevel: String
  category: String
  date: DateTime
  deviceId: Int
  lastUpdate: DateTime
  status: String
  subcategory: String
}


type LeasingDailySummary {
  trips: Int
  tripsDailyDistance: Float
  tripsDailyScoring: Float
  tripsEndOdometer: Float
  uberDailyDistance: Float
  uberFare: Float
  uberTrips: Int
  uberUsage: Float
}

type LeasingWeeklySummary {
  trips: Int
  tripsWeeklyDistance: Float
  tripsWeeklyScoring: Float
  tripsWeeklyEndOdometer: Float
  uberWeeklyDistance: Float
  uberFares: Float
  uberTrips: Int
  uberUsage: Float
}

type LeasingFinancialWeekSummary {
  weekNumber: Int
  startDate: DateTime
  endDate: DateTime
  cutDate: DateTime
  weeklyFeeAmount: Float
  behaviorFineAmount: Float
  otherFinesAmount: Float
  previousUnpaidAmount: Float
  interestsAmount: Float
}

type LeasingFinancialWeekSummary {
  weekNumber: Int
  startDate: DateTime
  endDate: DateTime
  cutDate: DateTime
  weeklyFeeAmount: Float
  behaviorFineAmount: Float
  otherFinesAmount: Float
  previousUnpaidAmount: Float
  interestsAmount: Float
}

type LeasingFinancialDebtVoucher {
  code: String
  amount: Float
  validUntil: DateTime
}

type LeasingSummary {
  contractNumber: String
  lastUpdate: String
  weekNumber: Int
  startDate: String
  endDate: String
  baseServiceAmount: Int
  usage: Int
  usagePenalty: String
  usagePenaltyAmount: Int
  expensesAmount: Int
  totalAmount: Int
  uberEarningsGross: Int
  earningsProgress: Int
  previousExpensesAmount: Int
  previousExpensesDueDate: String
}

type LeasingPendingPaymentDetail {
  code: Int
  description: String
  amount: Float
  price: Float
}

type LeasingWeekDetail {
  companyId: Int
  id: Int!
  contractId: Int
  weekNumber: Int!
  startDate: DateTime
  endDate: DateTime
  cycleEndDate: DateTime
  dueDate: DateTime
  isClosed: Boolean
  isReconciliated: Boolean
}

type LeasingPendingPayment {
  id: Int
  bankReferer: String
  total: Float
  week: Int
  cycleEndDate: DateTime
  date: DateTime
  details: [LeasingPendingPaymentDetail]
}

type BankReferDeatil{
  ciaId: Int
  bankId: Int 
  bank: String 
  agreement: Int 
  clabe: String 
  account: String
}

type LeasingAccountSummary {
  companyId: Int
  contractId: Int
  weekNumber: Int
  startDate: DateTime
  endDate: DateTime
  cycleEndDate: DateTime
  grandTotal: Float
  accounts: [AccountSummary]
}

type AccountSummary {
  accountTypeId: Int
  accountName: String
  amount: Float
  subAccounts: [AccountSummary]
}

type LeasingPendingBankReference {
  reference: String!
  amount: Float!
  endDate: DateTime
  pendingPayments: [LeasingPendingPayment]
}

type VehicleUsage {
  tracker: Float!
  uber: Float!
  percentage: Float!
  dayOfWeek: Int!
  date: DateTime
}

type VehicleUsageSummary {
  currentOdometer: Float! 
  weeksSumDistance: Float!     # tracker
  uberWeeksSumDistance: Float! # uber
  uberWeeksUsage: Float!
  percentage: Float!
  drivingScore: Float!
  totalEvents: Int!
  totalTrips: Int!
}



