extend type Query {
  user: User!
  authWithCredentials(email: String!, password: String, provider: String): ClientApiAuthResponse!
  usersByGroup(groupId: String!): [User!]
}

extend type Mutation {
  createUser(input: CreateUserInput!): User
  updateUserPersonalInfo(input: UpdateUserPersonalInfoInput!): Boolean
}

type Group {
  id: String!
  title: String!
  users: [User]
}

type User {
  id: ID!
  firstName: String
  lastName: String
  secondLastName: String
  email: String
  phoneNumber: String
  picture: String
  
  groups: [Group]
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  name: String
  assignedGroups: [String!]!
}

input UpdateUserPersonalInfoInput {
  userId: ID!
  rfc: String!
  curp: String!
  firstName: String!
  lastName: String!
  secondLastName: String
}

type ClientApiAuthResponse {
  accessToken: String!
}
