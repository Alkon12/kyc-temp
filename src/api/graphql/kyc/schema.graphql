extend type Query {
  kycVerification(id: ID!): KycVerification
  kycVerificationByExternalId(externalReferenceId: String!, companyId: ID!): KycVerification
  kycVerifications(companyId: ID): [KycVerification!]
  pendingKycVerifications: [KycVerification!]
  assignedKycVerifications(userId: ID!): [KycVerification!]
  
  # Dashboard queries
  kycVerificationStats(companyId: ID): KycVerificationStats!
  kycVerificationsByStatus(status: KycVerificationStatus!, companyId: ID): [KycVerification!]
  kycVerificationsByPriority(priority: Int!, companyId: ID): [KycVerification!]
  kycVerificationsByDate(startDate: String!, endDate: String!, companyId: ID): [KycVerification!]
  
  # New KycPerson query
  getKycPersonById(id: ID!): KycPerson
  
  # Comprehensive queries
  kycVerificationWithRelations(id: ID!): KycVerificationWithRelations
  kycVerificationsWithRelations(companyId: ID, limit: Int, offset: Int): [KycVerificationWithRelations!]
  kycVerificationsWithRelationsByStatus(status: KycVerificationStatus!, companyId: ID, limit: Int, offset: Int): [KycVerificationWithRelations!]
  kycVerificationsWithRelationsByPriority(priority: Int!, companyId: ID, limit: Int, offset: Int): [KycVerificationWithRelations!]
  kycVerificationsWithRelationsByAssignee(userId: ID!, limit: Int, offset: Int): [KycVerificationWithRelations!]
}

extend type Mutation {
  createKycVerification(input: CreateKycVerificationInput!): KycVerification!
  updateKycVerificationStatus(id: ID!, status: KycVerificationStatus!, notes: String): Boolean!
  assignKycVerification(id: ID!, userId: ID!): Boolean!
  
  # New KycPerson mutations
  createKycPerson(input: CreateKycPersonInput!): KycPerson!
  updateKycPerson(id: ID!, input: UpdateKycPersonInput!): KycPerson!
  
  # Update contact information for KycPerson via verification token
  updateKycPersonContactByToken(token: String!, email: String!, phone: String!): KycPerson!
}

enum KycVerificationStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  REQUIRES_REVIEW
}

enum KycVerificationType {
  BRONZE
  SILVER
  GOLD
}

type KycVerification {
  id: ID!
  externalReferenceId: String
  companyId: ID!
  status: String!
  riskLevel: String
  priority: Int!
  verificationType: String!
  assignedTo: ID
  notes: String
  createdAt: String
  updatedAt: String
  completedAt: String
  
  company: Company
  assignedUser: User
  kycPerson: KycPerson
}

# Comprehensive type with all related entities
type KycVerificationWithRelations {
  id: ID!
  externalReferenceId: String
  companyId: ID!
  status: String!
  riskLevel: String
  priority: Int!
  verificationType: String!
  assignedTo: ID
  notes: String
  createdAt: String
  updatedAt: String
  completedAt: String
  
  company: Company
  assignedUser: User
  kycPersons: [KycPerson!]
  facetecResults: [FacetecResult!]
  documents: [Document!]
  activityLogs: [ActivityLog!]
  externalVerifications: [ExternalVerification!]
  verificationWorkflows: [VerificationWorkflow!]
  verificationLinks: [VerificationLink!]
}

type KycPerson {
  id: ID!
  verificationId: ID!
  firstName: String
  lastName: String
  dateOfBirth: String
  nationality: String
  documentNumber: String
  documentType: String
  email: String
  phone: String
  address: String
}

type Company {
  id: ID!
  companyName: String!
  apiKey: String
  status: String!
  callbackUrl: String
}

# Activity log type
type ActivityLog {
  id: ID!
  verificationId: ID!
  actionType: String!
  description: String!
  performedBy: ID
  createdAt: String!
  
  performer: User
  kycVerification: KycVerification
}

# Verification workflow type
type VerificationWorkflow {
  id: ID!
  verificationId: ID!
  step: String!
  status: String!
  metadata: JSON
  startedAt: String
  completedAt: String
  
  kycVerification: KycVerification
}

input KycPersonInput {
  firstName: String
  lastName: String
  dateOfBirth: String
  nationality: String
  documentNumber: String
  documentType: String
  email: String
  phone: String
  address: String
}

input CreateKycVerificationInput {
  companyId: ID!
  externalReferenceId: String
  verificationType: KycVerificationType!
  priority: Int
  riskLevel: String
  notes: String
  personInfo: KycPersonInput
  assignToUserId: ID
}

# New input types for KycPerson mutations
input CreateKycPersonInput {
  verificationId: ID!
  firstName: String
  lastName: String
  dateOfBirth: String
  nationality: String
  documentNumber: String
  documentType: String
  email: String
  phone: String
  address: String
}

input UpdateKycPersonInput {
  firstName: String
  lastName: String
  dateOfBirth: String
  nationality: String
  documentNumber: String
  documentType: String
  email: String
  phone: String
  address: String
}

# New types for dashboard
type KycVerificationStats {
  total: Int!
  pending: Int!
  inProgress: Int!
  approved: Int!
  rejected: Int!
  requiresReview: Int!
  byCompany: [CompanyStats!]
  byType: [TypeStats!]
  recentActivity: [KycVerification!]
}

type CompanyStats {
  companyId: ID!
  companyName: String!
  total: Int!
  pending: Int!
  approved: Int!
  rejected: Int!
}

type TypeStats {
  verificationType: String!
  count: Int!
}