import { ValueObject } from '@domain/kernel/ValueObject'
import { ValidationError } from '@domain/error/ValidationError'

export const PROSPECT_STATUSES = {
  PROSPECT_CREATED: 'PROSPECT_CREATED',

  CUSTOMER_INTERESTED: 'CUSTOMER_INTERESTED',
  CUSTOMER_UNDER_REVISION: 'CUSTOMER_UNDER_REVISION',
  CUSTOMER_NOT_INTERESTED: 'CUSTOMER_NOT_INTERESTED',
  CUSTOMER_NOT_ANSWERING: 'CUSTOMER_NOT_ANSWERING',

  APPLICATION_AWAITING_PREAPPROVAL: 'APPLICATION_AWAITING_PREAPPROVAL',
  APPLICATION_KYC_AWAITING_DOCUMENTATION: 'APPLICATION_KYC_AWAITING_DOCUMENTATION',
  APPLICATION_KYC_AWAITING_MEET: 'APPLICATION_KYC_AWAITING_MEET',

  APPLICATION_AWAITING_VEHICLE: 'APPLICATION_AWAITING_VEHICLE',
  APPLICATION_AWAITING_ACCOUNT_AND_PAYMENT: 'APPLICATION_AWAITING_ACCOUNT_AND_PAYMENT',

  APPLICATION_AWAITING_HANDOFF: 'APPLICATION_AWAITING_HANDOFF',

  APPLICATION_REJECTED: 'APPLICATION_REJECTED',
  APPLICATION_EXPIRED: 'APPLICATION_EXPIRED',
  APPLICATION_CANCELED_BY_USER: 'APPLICATION_CANCELED_BY_USER',
  PROSPECT_CLOSED: 'PROSPECT_CLOSED',
}

export class ProspectStatusId extends ValueObject<'ProspectStatusId', string> {
  constructor(value: string) {
    const valid = Object.values(PROSPECT_STATUSES)
    if (!valid.includes(value)) {
      throw new ValidationError(`Invalid ProspectStatusId [${value}], must be one of "${valid.join()}"`)
    }
    super(value)
  }

  static get(value: ProspectStatusId | string): ProspectStatusId {
    return typeof value === 'string' ? new ProspectStatusId(value) : value
  }

  static PROSPECT_CREATED = new ProspectStatusId(PROSPECT_STATUSES.PROSPECT_CREATED)

  static CUSTOMER_INTERESTED = new ProspectStatusId(PROSPECT_STATUSES.CUSTOMER_INTERESTED)
  static CUSTOMER_UNDER_REVISION = new ProspectStatusId(PROSPECT_STATUSES.CUSTOMER_UNDER_REVISION)
  static CUSTOMER_NOT_INTERESTED = new ProspectStatusId(PROSPECT_STATUSES.CUSTOMER_NOT_INTERESTED)
  static CUSTOMER_NOT_ANSWERING = new ProspectStatusId(PROSPECT_STATUSES.CUSTOMER_NOT_ANSWERING)

  static APPLICATION_AWAITING_PREAPPROVAL = new ProspectStatusId(PROSPECT_STATUSES.APPLICATION_AWAITING_PREAPPROVAL)
  static APPLICATION_KYC_AWAITING_DOCUMENTATION = new ProspectStatusId(
    PROSPECT_STATUSES.APPLICATION_KYC_AWAITING_DOCUMENTATION,
  )
  static APPLICATION_KYC_AWAITING_MEET = new ProspectStatusId(PROSPECT_STATUSES.APPLICATION_KYC_AWAITING_MEET)

  static APPLICATION_AWAITING_VEHICLE = new ProspectStatusId(PROSPECT_STATUSES.APPLICATION_AWAITING_VEHICLE)
  static APPLICATION_AWAITING_ACCOUNT_AND_PAYMENT = new ProspectStatusId(
    PROSPECT_STATUSES.APPLICATION_AWAITING_ACCOUNT_AND_PAYMENT,
  )

  static APPLICATION_AWAITING_HANDOFF = new ProspectStatusId(PROSPECT_STATUSES.APPLICATION_AWAITING_HANDOFF)

  static APPLICATION_REJECTED = new ProspectStatusId(PROSPECT_STATUSES.APPLICATION_REJECTED)
  static APPLICATION_EXPIRED = new ProspectStatusId(PROSPECT_STATUSES.APPLICATION_EXPIRED)
  static APPLICATION_CANCELED_BY_USER = new ProspectStatusId(PROSPECT_STATUSES.APPLICATION_CANCELED_BY_USER)
  static PROSPECT_CLOSED = new ProspectStatusId(PROSPECT_STATUSES.PROSPECT_CLOSED)
}
