image: atlassian/default-image:4

clone:
  depth: full

options:
  docker: true

pipelines:
  tags:
    prod-*:
      - step:
          name: Build Docker image on release
          deployment: Production
          script:
            - echo PAYLOAD_SECRET="${PAYLOAD_SECRET}" > .env
            - echo DATABASE_URI="${DATABASE_URI}" >> .env
            - echo NEXT_PUBLIC_APP_URL="${NEXT_PUBLIC_APP_URL}" >> .env
            - echo NEXTAUTH_URL"${NEXTAUTH_URL}"  >> .env
            - echo NEXTAUTH_SECRET="${NEXTAUTH_SECRET}"  >> .env
            - echo NEXT_PUBLIC_SKIP_TERMS_AND_CONDITIONS="${NEXT_PUBLIC_SKIP_TERMS_AND_CONDITIONS}"  >> .env
            - echo DATABASE_URL="${DATABASE_URL}"  >> .env
            - echo UBER_DB_DATABASE_NAME="${UBER_DB_DATABASE_NAME}"  >> .env
            - echo UBER_DB_USERNAME="${UBER_DB_USERNAME}"  >> .env
            - echo UBER_DB_PASSWORD="${UBER_DB_PASSWORD}"  >> .env
            - echo GRAPHQL_URL="${GRAPHQL_URL}"  >> .env
            - echo NEXT_PUBLIC_GRAPHQL_URL="${NEXT_PUBLIC_GRAPHQL_URL}"  >> .env
            - echo NEXT_PUBLIC_GRAPHQL_PUBLIC_URL="${NEXT_PUBLIC_GRAPHQL_PUBLIC_URL}"  >> .env
            - echo EXTERNAL_API_JWT_PUBLIC_KEY="${EXTERNAL_API_JWT_PUBLIC_KEY}"  >> .env
            - echo EXTERNAL_API_JWT_PRIVATE_KEY="${EXTERNAL_API_JWT_PRIVATE_KEY}"  >> .env
            - echo PAPERLESS_API_URL="${PAPERLESS_API_URL}"  >> .env
            - echo PAPERLESS_TOKEN="${PAPERLESS_TOKEN}"  >> .env
            - echo DOCUSEAL_API_URL="${DOCUSEAL_API_URL}"  >> .env
            - echo DOCUSEAL_TOKEN="${DOCUSEAL_TOKEN}"  >> .env
            - docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
            - docker build -t afllopez/uber:bobo-${BITBUCKET_TAG} --build-arg RELEASE_VERSION=bobo-$BITBUCKET_TAG .
            - docker push afllopez/uber:bobo-${BITBUCKET_TAG}
          services:
            - docker
      - step:
          name: Deploy Production
          script:
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/deployment.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/ingress.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/kustomization.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/service.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/prod/ingress.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/prod/kustomization.yaml
            - sed -i "s|{{hostname}}|${HOSTNAME}|g" .kube/default/prod/ingress.yaml
            - sed -i "s|{{image}}|afllopez/uber:elegante-$BITBUCKET_TAG|g" .kube/default/base_prod/deployment.yaml
            - echo "$(<.kube/default/prod/ingress.yaml)"
            - pipe: atlassian/kubectl-run:3.8.0
              variables:
                KUBE_CONFIG: $KUBECONFIG_PROD
                KUBECTL_COMMAND: 'apply'
                RESOURCE_PATH: '.kube/default/prod/'
                KUBECTL_APPLY_ARGS: '-k'
                KUBECTL_ARGS:
                  - '--context=default'
    dev-*:
      - step:
          name: Build Docker image
          deployment: Test
          script:
            - echo PAYLOAD_SECRET="${PAYLOAD_SECRET}" > .env
            - echo DATABASE_URI="${DATABASE_URI}" >> .env
            - echo NEXT_PUBLIC_APP_URL="${NEXT_PUBLIC_APP_URL}" >> .env
            - echo NEXTAUTH_URL"${NEXTAUTH_URL}"  >> .env
            - echo NEXTAUTH_SECRET"${NEXTAUTH_SECRET}"  >> .env
            - echo NEXT_PUBLIC_SKIP_TERMS_AND_CONDITIONS"${NEXT_PUBLIC_SKIP_TERMS_AND_CONDITIONS}"  >> .env
            - echo DATABASE_URL"${DATABASE_URL}"  >> .env
            - echo UBER_DB_DATABASE_NAME"${UBER_DB_DATABASE_NAME}"  >> .env
            - echo UBER_DB_USERNAME"${UBER_DB_USERNAME}"  >> .env
            - echo UBER_DB_PASSWORD"${UBER_DB_PASSWORD}"  >> .env
            - echo GRAPHQL_URL"${GRAPHQL_URL}"  >> .env
            - echo NEXT_PUBLIC_GRAPHQL_URL"${NEXT_PUBLIC_GRAPHQL_URL}"  >> .env
            - echo NEXT_PUBLIC_GRAPHQL_PUBLIC_URL"${NEXT_PUBLIC_GRAPHQL_PUBLIC_URL}"  >> .env
            - echo EXTERNAL_API_JWT_PUBLIC_KEY"${EXTERNAL_API_JWT_PUBLIC_KEY}"  >> .env
            - echo EXTERNAL_API_JWT_PRIVATE_KEY"${EXTERNAL_API_JWT_PRIVATE_KEY}"  >> .env
            - echo PAPERLESS_API_URL"${PAPERLESS_API_URL}"  >> .env
            - echo PAPERLESS_TOKEN"${PAPERLESS_TOKEN}"  >> .env
            - echo DOCUSEAL_API_URL"${DOCUSEAL_API_URL}"  >> .env
            - echo DOCUSEAL_TOKEN"${DOCUSEAL_TOKEN}"  >> .env
            - docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
            - docker build -t afllopez/uber:${APP_NAME}-${BITBUCKET_TAG} --build-arg RELEASE_VERSION=${APP_NAME}-$BITBUCKET_TAG .
            - docker push afllopez/uber:${APP_NAME}-${BITBUCKET_TAG}
          services:
            - docker
      - step:
          name: Deploy Testing
          script:
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/deployment.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/ingress.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/kustomization.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/base_prod/service.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/testing/ingress.yaml
            - sed -i "s|{{APP_NAME}}|${APP_NAME}|g" .kube/default/testing/kustomization.yaml
            - sed -i "s|{{hostname}}|${HOSTNAME}|g" .kube/default/testing/ingress.yaml
            - sed -i "s|{{image}}|afllopez/uber:${APP_NAME}-$BITBUCKET_TAG|g" .kube/default/base_prod/deployment.yaml
            - echo "$(<.kube/default/testing/ingress.yaml)"
            - pipe: atlassian/kubectl-run:3.8.0
              variables:
                KUBE_CONFIG: $KUBECONFIG
                KUBECTL_COMMAND: 'apply'
                RESOURCE_PATH: '.kube/default/testing/'
                KUBECTL_APPLY_ARGS: '-k'
                KUBECTL_ARGS:
                  - '--context=default'

definitions:
  services:
    docker:
      memory: 2048
# Modifica este archivo para actualizar la funcionalidad según sea necesario.
# Asegúrate de documentar cualquier cambio realizado para mantener la trazabilidad.
# docker build -t autofinplan:w20250617_v01 .
